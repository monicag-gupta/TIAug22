//Presented by Abhishek Jain
//Updated now
package AbhiMutability;
class Mut{
	int x;

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}
	
}
class Immut{
	private int i;
	private final Mut m;
	public int getI() {
		return i;
	}
	public Mut getM() {
		Mut m=new Mut();
		m.setX(this.m.getX());
		System.out.println("\nSending Obj of m from getM: " + m.hashCode());
		return m;
	}
	public Immut(int i, Mut m) {
		this.i = i;
		//this.m=m;
		this.m=new Mut();
		this.m.setX(m.getX());
		System.out.println("\nWe got " + m.hashCode() + " cloning the value to " + this.m.hashCode());
	}
	@Override
	public String toString() {
		return "Immut [i=" + i + ", m.x=" + m.getX() + "]\n hashcode of m:  " + m.hashCode();
	}
}

public class ImmutableClassEg {

	public static void main(String[] args) {
		Mut m=new Mut();
		m.setX(20);
		Immut objI=new Immut(10,m);
		System.out.println("\nMutable obj : " + m.hashCode());
		
		System.out.println("Original Immutable Obj: "+ objI);
		m.setX(30);
		System.out.println("Mut has changed to: m.x: " + m.getX() 
				+ "\nChanging Immutable Obj: "+ objI);
		objI.getM().setX(40);
		System.out.println("Direct Reference to Mut, m has changed to: objI.m.x: " + objI.getM().getX() 
				+ "\nChanging Immutable Obj: "+ objI);
	}

}
