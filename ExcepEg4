//difference between a checked excep, unchecked excep
//Runtime Exception:
//Not compulsorily handled by coders
//Not justified by Compiler
//If try..catch handles it, we get the exception not closing the program abruptly at runtime
//If throws is used in the calling function, still the exception will cause the program abruptly killed. 
//Throws usage is not significant.

//Compile time exception:
//	If thrown from a function, needs compulsorily:
//		Either throws statement in the function definition
//		Or try..catch handlers
//	If try..catch handles it, we get the exception not closing the program abruptly at runtime
//	If throws is used in the calling function, still the exception will cause the program abruptly killed. 
//	If throws keyword is used in a called function, the caller function must handle the exception or throws is added to function definition.




import java.io.*;
import java.util.*;
public class ExcepEg4 {
	static void fn() throws IOException{
		System.out.println("Age pl: ");
		int age=new Scanner(System.in).nextInt();
		if(age<0){
			throw new IOException("Ghost : run away from my project");
		}
	}

	public static void main(String[] args) {
		//throw new ArithmeticException(); //is neglected by the compiler, only caught by JVM
		//throw new IOException(); //is not neglected by the compiler, caught by Javac itself
		try {
			fn();
		} catch (IOException e) {
			System.out.println(e);
		}
	}

}
